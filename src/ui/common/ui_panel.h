/* Copyright (C) 2010-2019, The Regents of The University of Michigan.
 All rights reserved.

 This software was developed as part of the The Vulcan project in the Intelligent Robotics Lab
 under the direction of Benjamin Kuipers, kuipers@umich.edu. Use of this code is governed by an
 MIT-style License that can be found at "https://github.com/h2ssh/Vulcan".
*/


/**
* \file     ui_panel.h
* \author   Collin Johnson
* 
* Declaration of UIPanel interface used with the UIMainFrame for controlling the
* general behavior and data flow of a UI integrated with the Vulcan software.
*/

#ifndef UI_COMMON_UI_PANEL_H
#define UI_COMMON_UI_PANEL_H

#include <wx/event.h>
#include <memory>

class wxGLContext;
class wxStatusBar;

namespace vulcan
{
namespace system { class ModuleCommunicator; }
namespace utils  { class ConfigFileWriter; }
namespace utils  { class ConfigFile; }

namespace ui
{

/**
* UIPanel is an interface for a panel in a tabbed UI. A typical panel consists of a number of
* checkboxes, buttons, etc, and an OpenGLWidget subclass for visualizing data. A panel is
* responsible for controlling which data are rendered and for feeding the display widget with
* the necessary data.
* 
* The panels defined in the ui/debug/ folder should be considered as the references for how UIPanel
* is intended to be used.
* 
* A UIMainFrame will manipulate a collection of UIPanels, updating and refreshing them as needed.
* Additionally, the panel should support saving/loading the current display options and settings
* to a provided file to allow settings to persist across runs of the UI.
* 
* The flow of a UIPanel will be a series of calls to the initialization methods:
*   
*   - setup()
*   - subscribe()
*   - setConsumer()
*   - loadSettings()
* 
* Then the main loop of the program will be entered and calls to update() will be made at the established
* framerate of the program. Finally, when the program is requested to close saveSettings() will be called.
* 
* A UIPanel is a subclass of wxEvtHandler, so implementations of the UIPanel interface need only define
* their event tables. Registration for events will happen via the UIMainFrame.
*/
class UIPanel : public wxEvtHandler
{
public:

    virtual ~UIPanel(void) { }
    
    ////////////////// Initialization /////////////////////////////
    /**
    * setup provides the panel with the GLContext to be used for rendering and the status bar for widgets
    * that use it to display information.
    * 
    * In both cases, the UIMainFrame maintains ownership of the values. The status bar should only be updated
    * when the panel is actually visible, otherwise another panel's data might be overwritten.
    * 
    * \param[in]    context         OpenGL context to be used for rendering
    * \param[in]    statusBar       Status bar to which the panel can set information
    */
    virtual void setup(wxGLContext* context, wxStatusBar* statusBar) = 0;
    
    /**
    * subscribe provides an instance ModuleCommunicator that handles management of incoming data. The panel
    * can subscribe to the desired types of data.
    * 
    * \param[in]    producer        Communicator responsible for providing panels with new data
    */
    virtual void subscribe(system::ModuleCommunicator& producer) = 0;
    
    /**
    * setConsumer sets the ModuleCommunicator instance to be used if any output is generated by the panel
    * transmission to other modules.
    * 
    * \param[in]    consumer        Communicator to be used for sending out data
    */
    virtual void setConsumer(system::ModuleCommunicator* consumer) = 0;
    
    ////////////////// General processing ////////////////////////////
    
    /**
    * update will be called at the main UI's framerate. A call to update() should change any necessary text
    * on the screen -- the only safe time to do so -- and call Refresh on the panel's OpenGLWidget, so it is
    * redrawn properly.
    */
    virtual void update(void) = 0;
    
    /////////////////// Settings /////////////////////////
    
    /**
    * saveSettings saves the settings for the options on the panel to a file, so they can persist across
    * separate runs of the UI.
    * 
    * \param[in]    config              Config writer in which the settings will be saved
    */
    virtual void saveSettings(utils::ConfigFileWriter& config) = 0;
    
    /**
    * loadSettings loads settings for display options from a configuration file and applies them to
    * the current instance of the panel, thereby allowing persistance across different runs of the UI.
    * 
    * \param[in]    config              Configuration file with the settings
    */
    virtual void loadSettings(const utils::ConfigFile& config) = 0;
};

}
}

#endif // UI_COMMON_UI_PANEL_H
